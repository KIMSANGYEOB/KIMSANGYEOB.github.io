{"pages":[],"posts":[{"title":"기술 블로그 조사 &amp; 시작","text":"정적 사이트 생성기술 블로그를 시작하기전에 Github과 연동하여 운영하고싶어 정적 사이트를 만들만한 프레임워크들을 조사했다. Jekyll 루비 기반 가장 보편적이고 인기많은 정적 사이트 제작 프레임워크 문서가 많아지면 빌드하는데 5분이상이 소요될 수 있음 다양한 테마 Hexo 자바스크립트(Node.js) 기반 한글로 번역된 문서사이트 존재(완벽하진 않음) 다양한 테마 Hugo Golang 기반 매우 빠른 빌드속도 테마는 부족 Hugo? Hexo?처음에 빠른 빌드속도가 빠른것이 장점이라고 많이 알려져 있어서 Hugo로 테스트를 진행해보았다. 하지만, Go언어 기반으로 되어있어서 Go 언어를 잘 모를시에 구조 파악이나 테마 사용 시 내 입맛대로 커스텀 하기가 쉽지 않다는 것이 느껴졌다. 현재 사용하는 언어가 자바스크립트가 주력 언어이고 관련 개발을 진행하고 있으니 Hexo를 사용하기로 마음먹었다. Hexo 설치Hexo는 Node.js 기반이기 때문에 Node.js가 설치되어있어야 한다. 글로벌하게 hexo-cli 설치한다. 1$ npm install hexo-cli -g hexo로 Blog 프로젝트를 만들어준다. 123$ hexo init blog$ cd blog$ npm install 테마적용을 위해 git clone 진행 (icarus 테마를 선택) 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git hexo 테마 themes 폴더안에 clone 받은 테마의 폴더명을 hexo-theme-icarus -&gt; icarus로 변경해준다. 루트 경로에서 _config.yml 파일을 아래처럼 수정해준다. 1theme: icarus 테마에 필요한 npm 패키지들을 설치해준다. (icarus 경우 아래 패키지들이 필요함) bulma-stylus hexo-component-inferno hexo-renderer-inferno inferno inferno-create-element 1$ npm install --save bulma-stylus hexo-component-inferno hexo-renderer-inferno inferno inferno-create-element hexo s 명령어로 로컬에서 테마가 적용됬는지 확인 1$ hexo s 후기Hexo 프레임워크와 Icarus 테마로 블로그를 생성하면서 정말 손쉽게 블로그를 구성할 수 있었고 JS기반이라 구조파악이 생각보다 단순했다. 이후에는 Icarus 테마에 대해 다크테마, 커스터마이징, … 등등을 진행해서 좀 더 내 입맛대로 꾸며볼 예정이다.","link":"/2021/08/08/blog/"},{"title":"Git을 활용한 버전관리-1","text":"버전 관리 어떤 프로젝트에서 특정 시점 및 관리를 위해 버전을 관리하는것은 필수라고 할 수 있다. starbucks starbucks 로그인 페이지 개발본 starbucks 스크롤 버그 수정 starbucks 배포용 위에 목록처럼 여러가지의 기능이 추가되고 수정되면서 프로젝트 정보가 변경된다. 관리 및 특정 시점의 버전을 관리해야하는것은 필수적인 요소라 할 수 있는데 여러 사람과의 작업 및 규모가 클수록 관리가 힘들어진다. 이런 프로젝트의 관리를 위해 SVN, Git, … 등등의 버전 관리 시스템을 도입하여 사용하고 있다. Git Git은 컴퓨터 파일의 변경사항을 추적하고 여러 사용자들 간에 파일 작업을 조율하기위한 VCS(Version Control System) 시스템 설치git 다운로드 위 링크에서 각 운영체제에 맞는 설치 프로그램을 다운로드 후 실행하여 설치하여 터미널에서 테스트 진행 기본 명령어 12345678910111213141516171819202122232425# Mac 개행문자 설정git config --global core.autocrlf input# Windows 개행문자 설정git config --global core.autocrlf true## 사용자 정보## 커밋(버전 생성)을 위한 기본정보 등록git config --global user.name 'YOUR_NAME'git config --global user.email'YOUR_EMAIL'# 구성 확인git config --global --listgit init# 현재 프로젝트에서 변경사항 추적을 시작git add index.html# 변경사항을 추적할 특정 파일을 지정git add .# 모든 파일의 변경사항을 추적하도록 지정git commit -m 'main.js 추가'# 메세지(-m)와 함께 버전을 생성git remote add origin 'https://github.c...'# origin이란 별칭의 원격 저장소로 버전 내역 설정git push origin master# origin이란 별칭의 원격 저장소로 버전 내역 전송 현재는 사용하는 로컬 컴퓨터에만 git정보가 등록이 되어 사용하던 컴퓨터가 없으면 다시 다운로드를 받을 수 없다. 어디서든지 다시 프로젝트 정보를 다운로드 받을 수 있도록 Github 서비스를 이용한다. Github깃헙 가입하기 Singup 버튼을 통해 가입을 진행(이메일 인증이 필요함) 프로젝트 정보를 업로드 할 Repository 생성을 위해 New Repository 버튼으로 생성 진행 Github 주소 등록 업로드를 위해 Github Repository의 주소를 복제한다. 1234git remote add origin https://&quot;repository 주소&quot;# 원격(Github 저장소를 뜻) 주소를 지정하기git push origin master# 원격 저장소에 업로드 (Github로그인 관련 안내가 나오면 진행) Git 활용Git 활용 및 명령어에 대해 더 자세히 알아보자 Git Commitgit commit 명령어를 통해 수정한 내용 반영 123456git status# 현재 git 상태 확인git log# 현재 반영사항 및 커밋목록 확인git commit -m 'main.js 추가'# 메세지(-m)와 함께 버전을 생성 Git Branch 프로젝트에서 여러 개발자가 각 기능이나 어떤 부분을 맡아 개발이 진행된다면 그 부분에 맞게 Branch를 분리해서 개발을 진행할 수 있다. 1234567891011121314git branch# 브랜치 목록 확인git branch -a# 브랜치 목록과 원격저장소도 확인git branch signin# signin 브랜치 생성git checkout signin# signin 브랜치로 변경git add .# 작업사항 추적git commit -m &quot;singin 페이지 구성&quot;# 수정한 내용 반영git push origin signin# 원격 저장소의 signin 브랜치에 업로드 Git Clone 다른환경에서 작업할경우 원격저장소에 있는 프로젝트를 내려받을 수 있다. 로컬환경에 프로젝트를 내려받을 폴더나 위치를 정하고 진행하는 것을 추천한다. 1git clone &quot;Github 원격 저장소 주소&quot; 다음 글에서는 Commit Reset, Conflict, Merge 등에 대해 Git의 보다 자세한 사용법에 다룰 예정이다.","link":"/2021/09/19/git/"},{"title":"typescript-1","text":"타입스크립트 Language Typed Superset of JavaScript compiles to plain JavaScript 컴파일 컴파일이 필요 O 컴파일러가 필요 O 컴파일하는 시점 O 컴파일된 결과물을 실행 설치12npm i typescript -g# npm init 후 npm i typescript 명령어로 프로젝트에만 tsc 사용도 가능 Visual Studio Code 2015, 2017 이후로는 디폴트로 설치됨 환경설정12tsc --init# tsconfig.json 컴파일 시 옵션을 설정 TypeScript Compiler VS Code에 컴파일러가 내장되어 있다. 내장된 컴파일러버전은 VSCode가 업데이트 되면서 올라간다. 만약 VS Code에 내장된 버전이 아닌 프로젝트 환경 전용으로 사용하고 싶다면 npm install typesript를 package.json 쪽에 버전을 명시하여 사용할 수 있다.","link":"/2021/09/25/typescript-1/"},{"title":"serverless-stack","text":"Docs SST 서버리스 스택(SST)은 서버리스 앱을 쉽게 구축할 수 있는 프레임워크라고 소개되어 있다. 2021-10-24일 기준으로 현재 SST는 JavaScript, TypeScript, Python, Golang 및 C#을 지원하고 있다. Language CDK Lambda JavaScript ✓ ✓ TypeScript ✓ ✓ Go Coming soon ✓ Python Coming soon ✓ C# Coming soon ✓ F# Coming soon ✓ SST 프레임워크를 사용하면 앱에서 필요한 인프라스트럭쳐를 코드로(AWS CDK 사용) 정의하고, AWS Lambda 함수를 보다 간편하게 구성할 수 있다. 디자인 원리 SST는 몇가지 핵심 원리를 가지고 설계된 프레임워크이다. 점진적 공개 구조의 설정 권한 부여 제로베이스 구성 점진적 공개서버리스 앱을 구축하기 위해 SST가 제공 하는 구성은 점진적 공개 라는 아이디어를 기반으로 한다.기본 구성이 간단하고 이해하기 쉬우며 환경파악에 용이하며, 더 복잡한 사용 사례에 대해 점진적으로 사용자가 쉽게 지정할 수 있는 장점이 있다. 구조의 설정Api Routes에 간단한 예시 123456new Api(this, &quot;Api&quot;, { routes: { &quot;GET /notes&quot;: &quot;src/list.main&quot;, &quot;POST /notes&quot;: &quot;src/create.main&quot;, },}); 이러한 형태는 정의한것을 쉽게 이해할 수 있다. 만약 커스텀한 함수 속성이 필요하다면 아래와 같이 추가할 수 있다. 123456789101112131415new Api(this, &quot;Api&quot;, { defaultFunctionProps: { srcPath: &quot;src/&quot;, environment: { tableName: table.tableName }, }, routes: { &quot;GET /notes&quot;: { function: { handler: &quot;list.main&quot;, srcPath: &quot;services/functions/&quot;, }, }, &quot;POST /notes&quot;: &quot;create.main&quot;, },}); 권한 부여 SST는 attaching function을 통해 권한을 부여한다. 아래 cronjob 설정에 대한 예를 살펴보자 1234const cron = new Cron(this, &quot;Cron&quot;, { schedule: &quot;rate(1 minute)&quot;, job: &quot;src/lambda.main&quot;,}); cronjob에 대한 접근권한을 부여에 대한 예시 123456789101112131415161718// cronjob 함수에 모든 접근권한 부여cron.attachPermissions(PermissionType.ALL);// 특정 리소스에만 접근권한 부여cron.attachPermissions([&quot;s3&quot;]);import { PolicyStatement, Effect } from &quot;@aws-cdk/aws-iam&quot;;// IAM 정책으로 권한부여cron.attachPermissions([ new PolicyStatement({ actions: [&quot;execute-api:Invoke&quot;], effect: Effect.ALLOW, resources: [ `arn:aws:execute-api:${region}:${account}:${api.httpApiId}/*`, ], }),]); 제로베이스 구성SST를 프레임워크가 탄생한 가장 큰 이유 중 하나는 서버리스 개발 환경이 항상 부족하다고 느꼈기 때문이라고 한다. 부족한 점 Live Lambda Development 가 해결하려고 하는 긴밀한 피드백 루프가 부족 여러 플러그인, Webpack, Babel, TypeScript, 테스트 프레임워크, 린터 등을 구성해야 함 설정은 종종 깨지기 쉽고 최신 상태를 유지하기 위해 별도의 프로젝트 유지 관리자에 의존 위에 부족한 점들로 인해 Serverless 환경에 많은 경험이 있는 개인 개발자라면 괜찮겠지만 더 큰 팀의 일원이거나 이제 막 서버리스를 시작하는 경우 개발 환경을 시작하고 실행하는 것이 매우 어려운 점 발생한다. SST의 설계 원칙 중 하나는 개발 환경이 기본적으로 작동하는지 확인하는 것이며, 구성이 거의 또는 전혀 필요하지 않는것이 핵심 원칙이다. Quick StartNode 환경에서 아래 명령어로 빠르게 SST 프로젝트를 생성할 수 있다. 123456789# Create your appnpx create-serverless-stack@latest my-sst-appcd my-sst-app# Start Live Lambda Developmentnpx sst start# Deploy to prodnpx sst deploy --stage prod 다음 포스트에서는 SST 프로젝트의 구성 및 기본 사용법에 대해 작성한다.","link":"/2021/10/24/serverless/"}],"tags":[{"name":"git","slug":"git","link":"/tags/git/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"},{"name":"aws","slug":"aws","link":"/tags/aws/"},{"name":"serverless","slug":"serverless","link":"/tags/serverless/"},{"name":"serverless-stack","slug":"serverless-stack","link":"/tags/serverless-stack/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"FastCampus","slug":"FastCampus","link":"/categories/FastCampus/"},{"name":"serverless-stack","slug":"serverless-stack","link":"/categories/serverless-stack/"}]}