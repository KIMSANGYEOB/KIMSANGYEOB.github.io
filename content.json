{"pages":[],"posts":[{"title":"기술 블로그 조사 &amp; 시작","text":"정적 사이트 생성기술 블로그를 시작하기전에 Github과 연동하여 운영하고싶어 정적 사이트를 만들만한 프레임워크들을 조사했다. Jekyll 루비 기반 가장 보편적이고 인기많은 정적 사이트 제작 프레임워크 문서가 많아지면 빌드하는데 5분이상이 소요될 수 있음 다양한 테마 Hexo 자바스크립트(Node.js) 기반 한글로 번역된 문서사이트 존재(완벽하진 않음) 다양한 테마 Hugo Golang 기반 매우 빠른 빌드속도 테마는 부족 Hugo? Hexo?처음에 빠른 빌드속도가 빠른것이 장점이라고 많이 알려져 있어서 Hugo로 테스트를 진행해보았다. 하지만, Go언어 기반으로 되어있어서 Go 언어를 잘 모를시에 구조 파악이나 테마 사용 시 내 입맛대로 커스텀 하기가 쉽지 않다는 것이 느껴졌다. 현재 사용하는 언어가 자바스크립트가 주력 언어이고 관련 개발을 진행하고 있으니 Hexo를 사용하기로 마음먹었다. Hexo 설치Hexo는 Node.js 기반이기 때문에 Node.js가 설치되어있어야 한다. 글로벌하게 hexo-cli 설치한다. 1$ npm install hexo-cli -g hexo로 Blog 프로젝트를 만들어준다. 123$ hexo init blog$ cd blog$ npm install 테마적용을 위해 git clone 진행 (icarus 테마를 선택) 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git hexo 테마 themes 폴더안에 clone 받은 테마의 폴더명을 hexo-theme-icarus -&gt; icarus로 변경해준다. 루트 경로에서 _config.yml 파일을 아래처럼 수정해준다. 1theme: icarus 테마에 필요한 npm 패키지들을 설치해준다. (icarus 경우 아래 패키지들이 필요함) bulma-stylus hexo-component-inferno hexo-renderer-inferno inferno inferno-create-element 1$ npm install --save bulma-stylus hexo-component-inferno hexo-renderer-inferno inferno inferno-create-element hexo s 명령어로 로컬에서 테마가 적용됬는지 확인 1$ hexo s 후기Hexo 프레임워크와 Icarus 테마로 블로그를 생성하면서 정말 손쉽게 블로그를 구성할 수 있었고 JS기반이라 구조파악이 생각보다 단순했다. 이후에는 Icarus 테마에 대해 다크테마, 커스터마이징, … 등등을 진행해서 좀 더 내 입맛대로 꾸며볼 예정이다.","link":"/2021/08/08/blog/"},{"title":"Git을 활용한 버전관리-1","text":"버전 관리 어떤 프로젝트에서 특정 시점 및 관리를 위해 버전을 관리하는것은 필수라고 할 수 있다. starbucks starbucks 로그인 페이지 개발본 starbucks 스크롤 버그 수정 starbucks 배포용 위에 목록처럼 여러가지의 기능이 추가되고 수정되면서 프로젝트 정보가 변경된다. 관리 및 특정 시점의 버전을 관리해야하는것은 필수적인 요소라 할 수 있는데 여러 사람과의 작업 및 규모가 클수록 관리가 힘들어진다. 이런 프로젝트의 관리를 위해 SVN, Git, … 등등의 버전 관리 시스템을 도입하여 사용하고 있다. Git Git은 컴퓨터 파일의 변경사항을 추적하고 여러 사용자들 간에 파일 작업을 조율하기위한 VCS(Version Control System) 시스템 설치git 다운로드 위 링크에서 각 운영체제에 맞는 설치 프로그램을 다운로드 후 실행하여 설치하여 터미널에서 테스트 진행 기본 명령어 12345678910111213141516171819202122232425# Mac 개행문자 설정git config --global core.autocrlf input# Windows 개행문자 설정git config --global core.autocrlf true## 사용자 정보## 커밋(버전 생성)을 위한 기본정보 등록git config --global user.name 'YOUR_NAME'git config --global user.email'YOUR_EMAIL'# 구성 확인git config --global --listgit init# 현재 프로젝트에서 변경사항 추적을 시작git add index.html# 변경사항을 추적할 특정 파일을 지정git add .# 모든 파일의 변경사항을 추적하도록 지정git commit -m 'main.js 추가'# 메세지(-m)와 함께 버전을 생성git remote add origin 'https://github.c...'# origin이란 별칭의 원격 저장소로 버전 내역 설정git push origin master# origin이란 별칭의 원격 저장소로 버전 내역 전송 현재는 사용하는 로컬 컴퓨터에만 git정보가 등록이 되어 사용하던 컴퓨터가 없으면 다시 다운로드를 받을 수 없다. 어디서든지 다시 프로젝트 정보를 다운로드 받을 수 있도록 Github 서비스를 이용한다. Github깃헙 가입하기 Singup 버튼을 통해 가입을 진행(이메일 인증이 필요함) 프로젝트 정보를 업로드 할 Repository 생성을 위해 New Repository 버튼으로 생성 진행 Github 주소 등록 업로드를 위해 Github Repository의 주소를 복제한다. 1234git remote add origin https://&quot;repository 주소&quot;# 원격(Github 저장소를 뜻) 주소를 지정하기git push origin master# 원격 저장소에 업로드 (Github로그인 관련 안내가 나오면 진행) Git 활용Git 활용 및 명령어에 대해 더 자세히 알아보자 Git Commitgit commit 명령어를 통해 수정한 내용 반영 123456git status# 현재 git 상태 확인git log# 현재 반영사항 및 커밋목록 확인git commit -m 'main.js 추가'# 메세지(-m)와 함께 버전을 생성 Git Branch 프로젝트에서 여러 개발자가 각 기능이나 어떤 부분을 맡아 개발이 진행된다면 그 부분에 맞게 Branch를 분리해서 개발을 진행할 수 있다. 1234567891011121314git branch# 브랜치 목록 확인git branch -a# 브랜치 목록과 원격저장소도 확인git branch signin# signin 브랜치 생성git checkout signin# signin 브랜치로 변경git add .# 작업사항 추적git commit -m &quot;singin 페이지 구성&quot;# 수정한 내용 반영git push origin signin# 원격 저장소의 signin 브랜치에 업로드 Git Clone 다른환경에서 작업할경우 원격저장소에 있는 프로젝트를 내려받을 수 있다. 로컬환경에 프로젝트를 내려받을 폴더나 위치를 정하고 진행하는 것을 추천한다. 1git clone &quot;Github 원격 저장소 주소&quot; 다음 글에서는 Commit Reset, Conflict, Merge 등에 대해 Git의 보다 자세한 사용법에 다룰 예정이다.","link":"/2021/09/19/git/"},{"title":"serverless-data-1","text":"AWS 서버리스 데이터 분석 시스템 아키텍쳐아래 유튜브 영상을 보고 관심이 생겨 글을 작성하게 되었다. 서버리스 데이터 분석 시스템 구축 | Part 1. 개념 및 워크 플로우 Sungmin Kim. Solutions Architect, AWS 데이터로 어떤 작업을? 네트워크 분석 추천 머신러닝 그 외… What is Architecting 어떤 문제를 풀기위해서 다양한 방법들이 있을텐데, 다양한 장단점들을 Trade-off 해서 밸런싱하는것이 아키텍팅의 중심이라고 생각할 수 있다. 꼭 어떤 방법론이나 적용법이 가장 좋은 방법이라고 단정지을 순 없다. 데이터 데이터만 가지고 가치가 있는것이 아니라 데이터를 가지고 원하는 결과 및 인사이트를 내기위하여 과정들이 필요하다. 3+1 Vs of Big Data 과거에 비해서 분석시스템이 만들기가 더 어려워졌을까? 그것은 빅데이터의 4가지 특성 어마어마게 커진 Volume 생산되는 속도의 차이 Velocity 데이터의 다양성 Variety 원하는 가치 Value 이런 복잡성 때문에 현대에 와서는 데이터분석 시스템이 복잡해지고 구축해지기 어려운 점이 있다. Structured, Unstructred, and Semi-Structured데이터의 다양한 모양 및 구조 Structred Data RDB에 잘 정의되있는 데이터 Unstructred Data 동영상, 텍스트 데이터 Semi-Structured Data CSV 데이터, JSON 데이터 Data Temperature Spectrum Hot data 빠른 빈도로 데이터 요청 응답시간이 빨라야 함 데이터의 양은 적음 In-Memory DB 사용 예시) 세션값 요청 Cold data 많은 양의 데이터 요청 응답시간은 좀 높아도 괜찮음 예시) 연말에 정산된 데이터 Warm data 상시적으로 사용하는 데이터 적당한 응답시간 모든 데이터를 동일한 스토리지, 분석 솔루션으로 처리하기 보다는 목적에 맞는 데이터의 온도에 따라 나누어서 적용하는게 바람직하다. Simpilfy Big Data Processing 아주 단순한 과정을 표현하자면 데이터 수집 데이터 저장 분석 및 프로세싱 데이터 소비 및 활용 중요한 점 데이터의 처리 속도 데이터의 볼륨의 처리 가능량 전체적인 프로세스의 비용 Business Intelligence System CRM &amp; CDC주기적으로 변경되는 데이터 저장 WEB쇼핑몰 등에서 클릭하는 데이터등을 저장 IoT사물 인터넷의 센서 데이터를 모아서 저장 다음에..다음글에서 실제 AWS 서비스 아키텍쳐를 구성하는 방안들에대해 설명이 나오는데 해당 내용으로 글을 이어나가도록 하겠다.","link":"/2021/11/29/serverless-data-1/"},{"title":"serverless-stack","text":"Docs SST 서버리스 스택(SST)은 서버리스 앱을 쉽게 구축할 수 있는 프레임워크라고 소개되어 있다. 2021-10-24일 기준으로 현재 SST는 JavaScript, TypeScript, Python, Golang 및 C#을 지원하고 있다. Language CDK Lambda JavaScript ✓ ✓ TypeScript ✓ ✓ Go Coming soon ✓ Python Coming soon ✓ C# Coming soon ✓ F# Coming soon ✓ SST 프레임워크를 사용하면 앱에서 필요한 인프라스트럭쳐를 코드로(AWS CDK 사용) 정의하고, AWS Lambda 함수를 보다 간편하게 구성할 수 있다. 디자인 원리 SST는 몇가지 핵심 원리를 가지고 설계된 프레임워크이다. 점진적 공개 구조의 설정 권한 부여 제로베이스 구성 점진적 공개서버리스 앱을 구축하기 위해 SST가 제공 하는 구성은 점진적 공개 라는 아이디어를 기반으로 한다.기본 구성이 간단하고 이해하기 쉬우며 환경파악에 용이하며, 더 복잡한 사용 사례에 대해 점진적으로 사용자가 쉽게 지정할 수 있는 장점이 있다. 구조의 설정Api Routes에 간단한 예시 123456new Api(this, &quot;Api&quot;, { routes: { &quot;GET /notes&quot;: &quot;src/list.main&quot;, &quot;POST /notes&quot;: &quot;src/create.main&quot;, },}); 이러한 형태는 정의한것을 쉽게 이해할 수 있다. 만약 커스텀한 함수 속성이 필요하다면 아래와 같이 추가할 수 있다. 123456789101112131415new Api(this, &quot;Api&quot;, { defaultFunctionProps: { srcPath: &quot;src/&quot;, environment: { tableName: table.tableName }, }, routes: { &quot;GET /notes&quot;: { function: { handler: &quot;list.main&quot;, srcPath: &quot;services/functions/&quot;, }, }, &quot;POST /notes&quot;: &quot;create.main&quot;, },}); 권한 부여 SST는 attaching function을 통해 권한을 부여한다. 아래 cronjob 설정에 대한 예를 살펴보자 1234const cron = new Cron(this, &quot;Cron&quot;, { schedule: &quot;rate(1 minute)&quot;, job: &quot;src/lambda.main&quot;,}); cronjob에 대한 접근권한을 부여에 대한 예시 123456789101112131415161718// cronjob 함수에 모든 접근권한 부여cron.attachPermissions(PermissionType.ALL);// 특정 리소스에만 접근권한 부여cron.attachPermissions([&quot;s3&quot;]);import { PolicyStatement, Effect } from &quot;@aws-cdk/aws-iam&quot;;// IAM 정책으로 권한부여cron.attachPermissions([ new PolicyStatement({ actions: [&quot;execute-api:Invoke&quot;], effect: Effect.ALLOW, resources: [ `arn:aws:execute-api:${region}:${account}:${api.httpApiId}/*`, ], }),]); 제로베이스 구성SST를 프레임워크가 탄생한 가장 큰 이유 중 하나는 서버리스 개발 환경이 항상 부족하다고 느꼈기 때문이라고 한다. 부족한 점 Live Lambda Development 가 해결하려고 하는 긴밀한 피드백 루프가 부족 여러 플러그인, Webpack, Babel, TypeScript, 테스트 프레임워크, 린터 등을 구성해야 함 설정은 종종 깨지기 쉽고 최신 상태를 유지하기 위해 별도의 프로젝트 유지 관리자에 의존 위에 부족한 점들로 인해 Serverless 환경에 많은 경험이 있는 개인 개발자라면 괜찮겠지만 더 큰 팀의 일원이거나 이제 막 서버리스를 시작하는 경우 개발 환경을 시작하고 실행하는 것이 매우 어려운 점 발생한다. SST의 설계 원칙 중 하나는 개발 환경이 기본적으로 작동하는지 확인하는 것이며, 구성이 거의 또는 전혀 필요하지 않는것이 핵심 원칙이다. Quick StartNode 환경에서 아래 명령어로 빠르게 SST 프로젝트를 생성할 수 있다. 123456789# Create your appnpx create-serverless-stack@latest my-sst-appcd my-sst-app# Start Live Lambda Developmentnpx sst start# Deploy to prodnpx sst deploy --stage prod 다음 포스트에서는 SST 프로젝트의 구성 및 기본 사용법에 대해 작성한다.","link":"/2021/10/24/serverless/"},{"title":"타입스크립트-1","text":"타입스크립트? Language Typed Superset of JavaScript compiles to plain JavaScript 자바스크립트 그리고 확장TypeScript는 JavaScript에 구문을 추가하여 편집기와 의 긴밀한 통합을 지원하며, 편집기에서 초기에 오류를 포착할 수 있다. 신뢰할 수 있는 결과TypeScript 코드는 JavaScript가 실행되는 모든 환경에서 실행되는 JavaScript로 변환 된다.예) 브라우저, Node.js 또는 Deno 및 앱 규모에 따른 안전TypeScript는 JavaScript를 이해하고 유형 추론을 사용 하여 추가 코드 없이도 훌륭한 도구를 제공한다. JavaScript는 웹 페이지에 사소한 상호작용을 추가하기 위한 작은 스크립팅 언어로 시작하여, 규모에 상관없이 프론트엔드와 백엔드 애플리케이션에서 선택 가능한 언어로 성장했습니다. JavaScript로 작성된 프로그램의 크기, 범위 및 복잡성은 기하급수적으로 커졌지만, 다른 코드 단위 간의 관계를 표현하는 JavaScript 언어의 능력은 그렇지 못했습니다. JavaScript의 다소 특이한 런타임 의미 체계(runtime semantics)와 더불어, 언어와 프로그램 복잡성 간의 불일치는 JavaScript 개발을 규모에 맞게 관리하기 어려운 작업으로 만들었습니다. 프로그래머들이 작성하는 가장 흔한 오류는 타입 오류이다. 다른 종류의 값이 예상되는 곳에 특정한 값이 사용된 경우이다.(이는 단순한 오타, 라이브러리 API를 이해하지 못한 것, 런타임 동작에 대한 잘못된 가정 또는 다른 오류 때문일 수 있다.) TypeScript의 목표는 JavaScript 프로그램의 정적 타입 검사자이다.(즉, 코드가 실행되기 전에 실행하고(정적), 프로그램 타입이 정확한지 확인하는 도구(타입 검사)이다.) JavaScript Short History JavaScript(ECMAScript으로도 알려져있는)는 처음에 브라우저를 위한 스크립팅 언어로 만들어졌습니다. JavaScript가 처음 나왔을 때, 수십 줄 이상의 코드를 작성하는 것은 다소 이례적인 일이었기에 웹 페이지\b 속 짧은 코드들을 위해 사용할 것으로 여겨졌습니다. 때문에, 초기 웹 브라우저들은 수십 줄 이상의 코드를 실행하는데 오래 걸렸습니다. 그러나 시간이 흘러 JS가 점점 더 유명해지면서, 웹 개발자들은 JS를 이용해 상호작용을 하는 경험을 하기 시작했습니다. 웹 브라우저 개발자들은 위와 같이 늘어나는 JS 사용량에 대하여 실행 엔진(동적 컴파일)을 최적화시키고 최적화 된 것을 이용해 할 수 있는 일(API 추가)을 확장하여 웹 개발자가 더 많이 JS를 사용할 수 있게 했습니다. 현대 웹사이트에서, 브라우저는 수십만 줄의 코드로 구성된 어플리케이션을 자주 실행합니다. 이는 정적 페이지의 간단한 네트워크로 시작해서, 모든 종류의 만족스러울만한 어플리케이션 을 위한 플랫폼으로 성장한 “웹”의 길고 점진적인 성장입니다. 이외에도, JS는 node.js를 사용하여 JS 서버들을 구현하는 것처럼, 브라우저 맥락에서 벗어나는 일에 사용하기 충분할 정도로 유명해졌습니다. “어디서든 작동됨”과 같은 JS의 성질은 교차 플랫폼(cross-platform) 개발을 위한 매력적인 선택지이기도 합니다. 오늘날 많은 개발자들은 오직 JavaScript만을 이용하여 전체 스택을 프로그래밍하고 있다. 요약하자면, 우리에게는 빠른 사용을 위해 설계되었으며 수백만 줄의 어플리케이션들을 작성하기 위해 만들어진 완벽한 도구인 JavaScript가 있습니다. 모든 언어는 각자의 별난 점 - 이상한 점과 놀랄만한 점이 있으며, JavaScript의 자랑스럽지만은 않은 시작은 많은 문제를 만들게 되었습니다. 예를 들어.. JavaScript의 동일 연산자는 (==) 인수를 강제로 변환하여(coerces), 예기치 않은 동작을 유발합니다: 123456if (&quot;&quot; == 0) { // 참입니다! 근데 왜죠??}if (1 &lt; x &lt; 3) { // *어떤* x 값이던 참입니다!} JavaScript는 또한 존재하지 않는 프로퍼티의 접근을 허용합니다: 123const obj = { width: 10, height: 15 };// 왜 이게 NaN이죠? 철자가 어렵네요!const area = obj.width * obj.heigth; 대부분의 프로그래밍 언어는 이런 종류의 오류들이 발생하면 오류를 표출해주고, 일부는 코드가 실행되기 전인 컴파일 중에 오류를 표출해줍니다. 작은 프로그램을 작성할 때에는, 이런 이상한 점들이 화를 돋구지만 관리는 가능합니다. 그러나 수백 또는 수천 줄의 어플리케이션들을 작성할 때에는, 이러한 지속적 놀라움들은 심각한 문제를 야기한다. TypeScript: 정적 타입 검사자 (TypeScript: A Static Type Checker)앞서 몇 언어는 버그가 많은 프로그램을 아예 실행시키지 않는다고 했습니다. 프로그램을 실행시키지 않으면서 코드의 오류를 검출하는 것을 정적 검사 라고 합니다. 어떤 것이 오류인지와 어떤 것이 연산 되는 값에 기인하지 않음을 정하는 것이 정적 타입 검사입니다. 정적 타입 검사자 인 TypeScript는 프로그램을 실행시키기 전에 값의 종류 를 기반으로 프로그램의 오류를 찾습니다. 예를 들어, 위의 마지막 예시에 오류가 있는 이유는 obj의 타입 때문입니다. 다음은 TypeScript에서 볼 수 있는 오류입니다: 123// @errors: 2551const obj = { width: 10, height: 15 };const area = obj.width * obj.heigth; 타입이 있는 JavaScript의 상위 집합 (A Typed Superset of JavaScript)그렇다면 TypeScript는 JavaScript와 어떤 관계일까요? 구문 (Syntax)TypeScript는 JS의 구문이 허용되는, JavaScript의 상위 집합 언어입니다. 구문은 프로그램을 만들기 위해 코드를 작성하는 방법을 의미합니다. 예를 들어, 다음 코드는 )이 없으므로 구문 오류입니다: 12// @errors: 1005let a = (4 TypeScript는 독특한 구문 때문에 JavaScript 코드를 오류로 보지 않습니다. 즉, 어떻게 작성돼있는지 모르지만 작동하는 JavaScript 코드를 TypeScript 파일에 넣어도 잘 작동합니다. 타입 (Types)그러나 TypeScript는 다른 종류의 값들을 사용할 수 있는 방법이 추가된, 타입이 있는 상위 집합입니다. 위의 obj.heigth 오류는 구문 오류가 아닌, 값의 종류(타입)를 잘못 사용해서 생긴 오류입니다. 또 다른 예시로, 아래와 같은 JavaScript 코드가 브라우저에서 실행될 때, 다음과 같은 값이 출력될 것입니다: 1console.log(4 / []); 구문적으로 옳은(syntactically-legal) 위 코드는 JavaScript에서 NaN을 출력합니다. 그러나 TypeScript는 배열로 숫자를 나누는 연산이 옳지 않다고 판단하고 오류를 발생시킵니다: 12// @errors: 2363console.log(4 / []); 실제로 어떤 일이 일어나는지 보려는 의도로 숫자를 배열로 나눌 수 있지만, 대부분은 프로그래밍 실수입니다. TypeScript의 타입 검사자는 일반적인 오류를 최대한 많이 검출하면서 올바른 프로그램을 만들 수 있게 설계되었습니다.(TypeScript가 코드를 얼마나 엄격하게 검사할 수 있는지에 대한 설정 또한 존재) 만약 JavaScript 파일의 코드를 TypeScript 코드로 옮기면, 코드를 어떻게 작성했는지에 따라 타입 오류 를 볼 수 있습니다. 이는 코드 상의 문제이거나, TypeScript가 지나치게 보수적인 것일 수 있습니다. 위와 같은 오류를 제거하기 위해 가이드는 다양한 TypeScript 구문을 추가하는 방법을 보여줍니다. 런타임 특성 (Runtime Behavior) TypeScript는 JavaScript의 런타임 특성 을 가진 프로그래밍 언어입니다. 예를 들어, JavaScript에서 0으로 나누는 행동은 런타임 예외로 처리하지 않고 Infinity값을 반환합니다. 논리적으로, TypeScript는 JavaScript 코드의 런타임 특성을 절대 변화시키지 않습니다. 즉 TypeScript가 코드에 타입 오류가 있음을 검출해도, JavaScript 코드를 TypeScript로 이동시키는 것은 같은 방식으로 실행시킬 것을 보장합니다 JavaScript와 동일한 런타임 동작을 유지하는 것은 프로그램 작동을 중단시킬 수 있는 미묘한 차이를 걱정하지 않고 두 언어 간에 쉽게 전환할 수 있도록 하기 위한 TypeScript의 기본적인 약속입니다. 삭제된 타입 (Erased Types) 개략적으로, TypeScript의 컴파일러가 코드 검사를 마치면 타입을 삭제해서 결과적으로 “컴파일된” 코드를 만듭니다. 즉 코드가 한 번 컴파일되면, 결과로 나온 일반 JS 코드에는 타입 정보가 없습니다. 타입 정보가 없는 것은 TypeScript가 추론한 타입에 따라 프로그램의 특성 을 변화시키지 않는다는 의미입니다. 결론적으로 컴파일 도중에는 타입 오류가 표출될 수 있지만, 타입 시스템 자체는 프로그램이 실행될 때 작동하는 방식과 관련이 없습니다. 마지막으로, TypeScript는 추가 런타임 라이브러리를 제공하지 않습니다. TypeScript는 프로그램은 JavaScript 프로그램과 같은 표준 라이브러리 (또는 외부 라이브러리)를 사용하므로, TypeScript 관련 프레임워크를 추가로 공부할 필요가 없습니다. 컴파일 컴파일이 필요 O 컴파일러가 필요 O 컴파일하는 시점 O 컴파일된 결과물을 실행 설치12npm i typescript -g# npm init 후 npm i typescript 명령어로 프로젝트에만 tsc 사용도 가능 Visual Studio Code 2015, 2017 이후로는 디폴트로 설치됨 환경설정12tsc --init# tsconfig.json 컴파일 시 옵션을 설정 TypeScript Compiler VS Code에 컴파일러가 내장되어 있다. 내장된 컴파일러버전은 VSCode가 업데이트 되면서 올라간다. 만약 VS Code에 내장된 버전이 아닌 프로젝트 환경 전용으로 사용하고 싶다면 npm install typesript를 package.json 쪽에 버전을 명시하여 사용할 수 있다. 레퍼런스 typescriptlang fastcampus 프론트앤드 풀패키지 강의","link":"/2021/09/25/typescript-1/"},{"title":"타입스크립트-2","text":"시작하기 전…typescriptlang in 5 minutes 위에글의 번역본을 가져와 글을 작성하였다. TypeScript for JavaScript Programmers프로그래밍 언어에서 TypeScript와 JavaScript의 관계는 다소 독특하다. TypeScript은 JavaScript 위에 레이어로서 자리잡고 있는데, JavaScript의 기능들을 제공하면서 그 위에 자체 레이어를 추가합니다. 이 레이어가 TypeScript 타입 시스템이다. JavaScript는 이미 string, number, object, undefined 같은 원시 타입을 가지고 있지만, 전체 코드베이스에 일관되게 할당되었는지는 미리 확인해 주지 않는다. TypeScript는 이 레이어로서 동작한다. 이는 이미 존재하고 잘 동작하는 JavaScript 코드는 동시에 TypeScript 코드라는 의미지만, TypeScript의 타입 검사기는 사용자가 생각한 일과 JavaScript가 실제로 하는 일 사이의 불일치를 강조할 수 있다. 이 튜토리얼은 TypeScript가 추가하는 타입 시스템 언어 확장을 이해하는데 중점을 두고 타입 시스템에 대한 5분 개요를 제공한다. 타입 추론 (Types by Inference)TypeScript는 JavaScript 언어를 알고 있으며 대부분의 경우 타입을 생성해줄 것입니다. 예를 들어 변수를 생성하면서 동시에 특정 값에 할당하는 경우, TypeScript는 그 값을 해당 변수의 타입으로 사용한다. 12let helloWorld = &quot;Hello World&quot;;// ^? JavaScript가 동작하는 방식을 이해함으로써 TypeScript는 JavaScript 코드를 받아들이면서 타입을 가지는 타입 시스템을 구축할 수 있다. 이는 코드에서 타입을 명시하기 위해 추가로 문자를 사용할 필요가 없는 타입 시스템을 제공하며, 위의 예제에서 TypeScript가 helloWorld가 string임을 알게 되는 방식이다. JavaScript와 함께 VS Code를 사용하고 작업을 할 때 편집기의 자동 완성 기능을 사용해왔을 것이다. 이는 TypeScript에 필수불가결한 JavaScript에 대한 이해가 JavaScript 작업을 개선하기 위해 내부적으로 사용되었기 때문이다. 타입 정의하기 (Defining Types)JavaScript는 다양한 디자인 패턴을 가능하게 하는 동적 언어입니다. 몇몇 디자인 패턴은 자동으로 타입을 제공하기 힘들 수 있는데 (동적 프로그래밍을 사용하고 있을 것이기 때문에) 이러한 경우에 TypeScript는 TypeScript에게 타입이 무엇이 되어야 하는지 명시 가능한 JavaScript 언어의 확장을 지원합니다. 다음은 name: string과 id: number을 포함하는 추론 타입을 가진 객체를 생성하는 예제입니다. 1234const user = { name: &quot;Hayes&quot;, id: 0,}; 이 객체의 형태를 명시적으로 나타내기 위해서는 interface 로 선언합니다. 1234interface User { name: string; id: number;} 이제 변수 선언 뒤에 : TypeName의 구문을 사용해 JavaScript 객체가 새로운 interface의 형태를 따르고 있음을 선언할 수 있습니다. 123456789interface User { name: string; id: number;}// ---cut---const user: User = { name: &quot;Hayes&quot;, id: 0,}; 해당 인터페이스에 맞지 않는 객체를 생성하면 TypeScript는 경고를 줍니다. 123456789// @errors: 2322interface User { name: string; id: number;}const user: User = { username: &quot;Hayes&quot;, id: 0,}; JavaScript는 클래스와 객체 지향 프로그래밍을 지원하기 때문에, TypeScript 또한 동일합니다. - 인터페이스는 클래스로도 선언할 수 있습니다. 12345678910111213interface User { name: string; id: number;}class UserAccount { name: string; id: number; constructor(name: string, id: number) { this.name = name; this.id = id; }}const user: User = new UserAccount(&quot;Murphy&quot;, 1); 인터페이스는 함수에서 매개변수와 리턴 값을 명시하는데 사용되기도 합니다. 123456789101112// @noErrorsinterface User { name: string; id: number;}// ---cut---function getAdminUser(): User { //...}function deleteUser(user: User) { // ...} JavaScript에서 사용할 수 있는 적은 종류의 원시 타입이 이미 있습니다.: boolean, bigint, null, number, string, symbol, object와 undefined는 인터페이스에서 사용할 수 있습니다. TypeScript는 몇 가지를 추기해 목록을 확장합니다. 예를 들어, any (무엇이든 허용합니다), unknown (이 타입을 사용하는 사람이 타입이 무엇인지 선언했는가를 확인하십시오), never (이 타입은 발생될 수 없습니다) void (undefined를 리턴하거나 리턴 값이 없는 함수). 타입을 구축하기 위한 두 가지 구문이 있다는 것을 꽤 빠르게 알 수 있을 것입니다.: Interfaces and Types - interface를 우선적으로 사용하고 특정 기능이 필요할 때 type을 사용해야 합니다. 타입 구성 (Composing Types)객체들을 조합하여 더 크고 복잡한 객체를 만드는 방법과 유사하게 TypeScript에 타입으로 이를 수행하는 도구가 있습니다. 여러가지 타입을 이용하여 새 타입을 작성하기 위해 일상적인 코드에서 가장 많이 사용되는 두 가지 코드로는 유니언(Union)과 제네릭(Generic)이 있습니다. 유니언 (Unions)유니언은 타입이 여러 타입 중 하나일 수 있음을 선언하는 방법입니다. 예를 들어, boolean 타입을 true 또는 false로 설명할 수 있습니다: 1type MyBool = true | false; 참고: MyBool위에 마우스를 올린다면, boolean으로 분류된 것을 볼 수 있습니다 - 구조적 타입 시스템의 프로퍼티며, 나중에 살펴보겠습니다. 유니언 타입이 가장 많이 사용된 사례 중 하나는 값이 다음과 같이 허용되는 string 또는 number의 리터럴집합을 설명하는 것입니다: 123type WindowStates = &quot;open&quot; | &quot;closed&quot; | &quot;minimized&quot;;type LockStates = &quot;locked&quot; | &quot;unlocked&quot;;type OddNumbersUnderTen = 1 | 3 | 5 | 7 | 9; 유니언은 다양한 타입을 처리하는 방법을 제공하는데, 예를 들어 array 또는 string을 받는 함수가 있을 수 있습니다. 123function getLength(obj: string | string[]) { return obj.length;} TypeScript는 코드가 시간에 따라 변수가 변경되는 방식을 이해하며, 이러한 검사를 사용해 타입을 골라낼 수 있습니다. Type Predicate string typeof s === “string” number typeof n === “number” boolean typeof b === “boolean” undefined typeof undefined === “undefined” function typeof f === “function” array Array.isArray(a) 예를 들어, typeof obj === “string”을 이용하여 string과 array를 구분할 수 있으며 TypeScript는 객체가 다른 코드 경로에 있음을 알게 됩니다. 12345678function wrapInArray(obj: string | string[]) { if (typeof obj === &quot;string&quot;) { return [obj];// ^? } else { return obj; }} 제네릭 (Generics)TypeScript 제네릭 시스템에 대해 자세히 알아볼 수 있지만, 1분 정도의 수준 높은 설명을 하기 위해, 제네릭은 타입에 변수를 제공하는 방법입니다. 배열이 일반적인 예시이며, 제네릭이 없는 배열은 어떤 것이든 포함할 수 있습니다. 제네릭이 있는 배열은 배열 안의 값을 설명할 수 있습니다. 123type StringArray = Array&lt;string&gt;;type NumberArray = Array&lt;number&gt;;type ObjectWithNameArray = Array&lt;{ name: string }&gt;; 제네릭을 사용하는 고유 타입을 선언할 수 있습니다: 123456789101112131415// @errors: 2345interface Backpack&lt;Type&gt; { add: (obj: Type) =&gt; void; get: () =&gt; Type;}// 이 줄은 TypeScript에 `backpack`이라는 상수가 있음을 알리는 지름길이며// const backpack: Backpack&lt;string&gt;이 어디서 왔는지 걱정할 필요가 없습니다.declare const backpack: Backpack&lt;string&gt;;// 위에서 Backpack의 변수 부분으로 선언해서, object는 string입니다.const object = backpack.get();// backpack 변수가 string이므로, add 함수에 number를 전달할 수 없습니다.backpack.add(23); 구조적 타입 시스템 (Structural Type System)TypeScript의 핵심 원칙 중 하나는 타입 검사가 값이 있는 _형태_에 집중한다는 것입니다. 이는 때때로 “덕 타이핑(duck typing)” 또는 “구조적 타이핑” 이라고 불립니다. 구조적 타입 시스템에서 두 객체가 같은 형태를 가지면 같은 것으로 간주됩니다. 123456789101112interface Point { x: number; y: number;}function printPoint(p: Point) { console.log(`${p.x}, ${p.y}`);}// &quot;12, 26&quot;를 출력합니다const point = { x: 12, y: 26 };printPoint(point); point변수는 Point타입으로 선언된 적이 없지만, TypeScript는 타입 검사에서 point의 형태와 Point의 형태를 비교합니다. 둘 다 같은 형태이기 때문에, 통과합니다. 형태 일치에는 일치시킬 객체의 필드의 하위 집합만 필요합니다. 12345678910111213141516171819// @errors: 2345interface Point { x: number; y: number;}function printPoint(p: Point) { console.log(`${p.x}, ${p.y}`);}// ---cut---const point3 = { x: 12, y: 26, z: 89 };printPoint(point3); // prints &quot;12, 26&quot;const rect = { x: 33, y: 3, width: 30, height: 80 };printPoint(rect); // prints &quot;33, 3&quot;const color = { hex: &quot;#187ABF&quot; };printPoint(color); 마지막으로, 정확하게 마무리 짓기 위해, 구조적으로 클래스와 객체가 형태를 따르는 방법에는 차이가 없습니다: 12345678910111213141516171819202122// @errors: 2345interface Point { x: number; y: number;}function printPoint(p: Point) { console.log(`${p.x}, ${p.y}`);}// ---cut---class VirtualPoint { x: number; y: number; constructor(x: number, y: number) { this.x = x; this.y = y; }}const newVPoint = new VirtualPoint(13, 56);printPoint(newVPoint); // prints &quot;13, 56&quot; 객체 또는 클래스에 필요한 모든 속성이 존재한다면, TypeScript는 구현 세부 정보에 관계없이 일치하게 봅니다.","link":"/2021/11/08/typescript-2/"},{"title":"js-proxy","text":"Proxy는 특정 객체를 감싸 프로퍼티 읽기, 쓰기와 같은 객체에 가해지는 작업을 중간에서 가로채는 객체이다. 가로채진 작업은 Proxy 자체에서 처리되기도 하고, 원래 객체가 처리하도록 그대로 전달되기도 한다. Creating a proxy object1let proxy = new Proxy(target, handler); target – 감싸게 될 객체로, 함수를 포함한 모든 객체 포함 handler – 동작을 가로채는 메서드인 ‘트랩(trap)’이 담긴 객체로, 여기서 Proxy를 설정 A simple proxy example1234567891011121314const user = { firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com',}const handler = { get(target, property) { console.log(`Property ${property} has been read.`); return target[property]; }}const proxyUser = new Proxy(user, handler); 123456console.log(proxyUser.firstName);console.log(proxyUser.lastName);// Property firstName has been read.// John// Property lastName has been read.// Doe user 객체에 proxyUser로 접근할경우 get() 메서드가 호출된다. 1234user.firstName = 'Jane';console.log(proxyUser.firstName);// Property firstName has been read.// Jane user 객체를 변경하면 proxyUser에도 반영된다. 123proxyUser.lastName = 'William';console.log(user.lastName);// William proxyUser 객체를 변경해도 user에 반영된다. Proxy TrapsThe get() trap일반적으로 get() 메서드에 커스텀한 로직을 작성하여 property에 접근할 때 get() trap을 발생시킬 수 있다. 12345678910111213141516const user = { firstName: 'John', lastName: 'Doe'}const handler = { get(target, property) { return property === 'fullName' ? `${target.firstName} ${target.lastName}` : target[property]; }};const proxyUser = new Proxy(user, handler);console.log(proxyUser.fullName); // John Doe The set() trapset() trap 은 target의 property가 set될때 발생한다. 12345678910111213141516171819202122232425const user = { firstName: 'John', lastName: 'Doe', age: 20}const handler = { set(target, property, value) { if (property === 'age') { if (typeof value !== 'number') { throw new Error('Age must be a number.'); } if (value &lt; 18) { throw new Error('The user must be 18 or older.') } } target[property] = value; }};const proxyUser = new Proxy(user, handler);proxyUser.age = 'foo'; // Error: Age must be a number.proxyUser.age = '16'; // The user must be 18 or older.proxyUser.age = 21; // OK. The apply() trapapply() trap은 함수가 호출될때 발생한다. 1234567891011121314151617181920212223let proxy = new Proxy(target, { apply: function(target, thisArg, args) { //... }});const user = { firstName: 'John', lastName: 'Doe'}const getFullName = function (user) { return `${user.firstName} ${user.lastName}`;}const getFullNameProxy = new Proxy(getFullName, { apply(target, thisArg, args) { return target(...args).toUpperCase(); }});console.log(getFullNameProxy(user)); // JOHN DOE proxy trap의 작동 시점 내부 메서드 핸들러 메서드 작동 시점 [[Get]] get 프로퍼티를 읽을 때 [[Set]] set 프로퍼티에 쓸 때 [[HasProperty]] has in 연산자가 동작할 때 [[Delete]] deleteProperty delete 연산자가 동작할 때 [[Call]] apply 함수를 호출할 때 [[Construct]] construct new 연산자가 동작할 때 [[GetPrototypeOf]] getPrototypeOf Object.getPrototypeOf [[SetPrototypeOf]] setPrototypeOf Object.setPrototypeOf [[IsExtensible]] isExtensible Object.isExtensible [[PreventExtensions]] preventExtensions Object.preventExtensions [[DefineOwnProperty]] defineProperty Object.defineProperty, Object.defineProperties [[GetOwnProperty]] getOwnPropertyDescriptor Object.getOwnPropertyDescriptor, for..in, Object.keys/values/entries [[OwnPropertyKeys]] ownKeys Object.getOwnPropertyNames, Object.getOwnPropertySymbols, for..in, Object/keys/values/entries 참고자료 ko.javascript.info javascripttutorial 후기js proxy는 다양한 라이브러리와 프레임워크에서 사용되고 있다고 한다. 잘 활용해서 JS 환경에서 좀 더 클린하고 효율적인 코드를 작성할 수 있지 않을까 기대를 해본다.","link":"/2021/12/13/js-proxy/"}],"tags":[{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"aws","slug":"aws","link":"/tags/aws/"},{"name":"serverless","slug":"serverless","link":"/tags/serverless/"},{"name":"database","slug":"database","link":"/tags/database/"},{"name":"serverless-stack","slug":"serverless-stack","link":"/tags/serverless-stack/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"proxy","slug":"proxy","link":"/tags/proxy/"}],"categories":[{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"serverless","slug":"serverless","link":"/categories/serverless/"},{"name":"javascript","slug":"javascript","link":"/categories/javascript/"}]}